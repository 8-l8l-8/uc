/** * *************************************************** * Copyright (C), NingBo ZhiWeiReach info. Co., Ltd. * ***************************************************** *  * */package com.zhiwei.wjgg.dao.impl;import java.util.List;import org.springframework.data.mongodb.core.query.Criteria;import org.springframework.data.mongodb.core.query.Query;import org.springframework.data.mongodb.core.query.Update;import org.springframework.stereotype.Component;import com.mongodb.WriteResult;import com.zhiwei.wjgg.dao.EventLevelDao;import com.zhiwei.wjgg.exception.ZhiWeiException;import com.zhiwei.wjgg.model.EventLevel;/** * @author 落花流水 * @date 2016-02-26 */@Componentpublic class EventLevelDaoImpl extends GeneralDaoImpl implements EventLevelDao{    @Override    public EventLevel insert(EventLevel ob) throws ZhiWeiException    {        try        {            ob.setId(ob.getEventLevel());            mongoTemp.insert(ob);        } catch (Exception e)        {            e.printStackTrace();        }        return ob;    }    @Override    public EventLevel findOne(String id) throws ZhiWeiException    {        EventLevel ob;        try        {            ob = mongoTemp.findOne(new Query(Criteria.where("_id").is(id)),                    EventLevel.class);            return ob;        } catch (Exception e)        {            e.printStackTrace();        }        return null;    }    @Override    public EventLevel findOne(EventLevel ob) throws ZhiWeiException    {        EventLevel eventLevel;        Query query = new Query();        query.addCriteria(Criteria.where("eventLevel").is(ob.getEventLevel()));        try        {            eventLevel = mongoTemp.findOne(query, EventLevel.class);            return eventLevel;        } catch (Exception e)        {            e.printStackTrace();        }        return null;    }    @Override    public List<EventLevel> findAll() throws ZhiWeiException    {        List<EventLevel> list;        try        {            list = mongoTemp.find(null, EventLevel.class);            return list;        } catch (Exception e)        {            e.printStackTrace();        }        return null;    }    @Override    public boolean removeOneById(String id) throws ZhiWeiException    {        boolean result = false;        try        {            mongoTemp.remove(new Query(Criteria.where("_id").is(id)),                    EventLevel.class);            result = true;        } catch (Exception e)        {            e.printStackTrace();        }        return result;    }    @Override    public boolean removeAll() throws ZhiWeiException    {        // TODO Auto-generated method stub        return false;    }    @Override    public boolean findAndModify(EventLevel ob) throws ZhiWeiException    {        boolean result = false;        WriteResult res;        try        {            Query query = new Query();            query.addCriteria(Criteria.where("_id").is(ob.getId()));            Update update = new Update();            update.set("eventLevel", ob.getEventLevel());            res = mongoTemp.upsert(query, update, EventLevel.class);            // mongoTemplate.findAndModify(new            // Query(Criteria.where("_id").is(ob.getId())),update, new            // FindAndModifyOptions().upsert(true).returnNew(true),Carwler.class);            result = true;        } catch (Exception e)        {            e.printStackTrace();        }        return result;    }    @Override    public long findCont() throws ZhiWeiException    {        return mongoTemp.count(null, EventLevel.class);    }}