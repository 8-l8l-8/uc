/** * *************************************************** * Copyright (C), NingBo ZhiWeiReach info. Co., Ltd. * ***************************************************** *  * */package com.zhiwei.wjgg.dao.impl;import java.util.HashMap;import java.util.List;import java.util.Map;import org.springframework.data.mongodb.core.query.Criteria;import org.springframework.data.mongodb.core.query.Query;import org.springframework.data.mongodb.core.query.Update;import org.springframework.stereotype.Component;import com.mongodb.WriteResult;import com.zhiwei.wjgg.conf.StaticParam;import com.zhiwei.wjgg.dao.EventTrendDao;import com.zhiwei.wjgg.exception.ZhiWeiException;import com.zhiwei.wjgg.model.Event;import com.zhiwei.wjgg.model.EventTrend;import com.zhiwei.wjgg.util.MapUtil;/** * @author 落花流水 * @date 2016-02-29 */@Componentpublic class EventTrendDaoImpl extends GeneralDaoImpl implements EventTrendDao{    @Override    public EventTrend insert(EventTrend ob)        throws ZhiWeiException    {        try        {            ob.setId((ob.getEventId() + ob.getType()).replace(" ", "_"));            Map<String, List> map = ob.getSource();            if (map!=null)            {                ob.setSource(MapUtil.treatOrderMapTop1000(map));            }            mongoTemp.insert(ob);        }        catch (Exception e)        {            e.printStackTrace();        }                return ob;    }        public List<EventTrend> insert(List<EventTrend> list)        throws ZhiWeiException    {        try        {            for (EventTrend ob : list)            {                ob.setId((ob.getEventId() + ob.getType()).replace(" ", "_"));                Map<String, List> map = ob.getSource();                if (map!=null)                {                    ob.setSource(MapUtil.treatOrderMapTop1000(map));                }                                mongoTemp.insert(ob);            }        }        catch (Exception e)        {            e.printStackTrace();        }                return list;    }        @Override    public EventTrend findOne(String id)        throws ZhiWeiException    {        EventTrend ob;        try        {            ob = mongoTemp.findOne(new Query(Criteria.where("_id").is(id)), EventTrend.class);            return ob;        }        catch (Exception e)        {            e.printStackTrace();        }        return null;    }        @Override    public EventTrend findOne(EventTrend ob)        throws ZhiWeiException    {        EventTrend ob1;        try        {            Query query = new Query();            query.addCriteria(Criteria.where("_id").is(ob.getType()+ob.getEventId()));            ob1 = mongoTemp.findOne(query, EventTrend.class);            return ob1;        }        catch (Exception e)        {            e.printStackTrace();        }        return null;    }        @Override    public List<EventTrend> findAll()        throws ZhiWeiException    {        List<EventTrend> list = null;        try        {            list = mongoTemp.find(null, EventTrend.class);        }        catch (Exception e)        {            e.printStackTrace();        }        return list;    }        @Override    public long findCont()        throws ZhiWeiException    {        return mongoTemp.count(null, EventTrend.class);    }        @Override    public boolean removeOneById(String id)        throws ZhiWeiException    {        boolean result = false;        try        {            mongoTemp.remove(new Query(Criteria.where("_id").is(id)), EventTrend.class);            result = true;        }        catch (Exception e)        {            e.printStackTrace();        }        return result;    }        @Override    public boolean removeAll()        throws ZhiWeiException    {        // TODO Auto-generated method stub        return false;    }        @Override    public boolean findAndModify(EventTrend ob)        throws ZhiWeiException    {        boolean result = false;        WriteResult res;        try        {            if (null == findOne(ob.getId()))            {                EventTrend ent = insert(ob);                result = true;            }                        Query query = new Query();            query.addCriteria(Criteria.where("_id").is(ob.getId()));            Update update = new Update();            update.set("time_num", ob.getTime_num());            if (null!=ob.getSource())            {                update.set("source", MapUtil.treatOrderMapTop1000(ob.getSource()));            }            update.set("infulence", ob.getInfulence());            update.set("dataCount", ob.getDataCount());            update.set("lastRsid", ob.getLastRsid());            res = mongoTemp.upsert(query, update, EventTrend.class);                        result = true;        }        catch (Exception e)        {            e.printStackTrace();        }        return result;    }        @Override    public EventTrend findByEventIdInTime(String eventId, String type)    {        EventTrend ob = null;        try        {            Query query = new Query();            query.addCriteria(Criteria.where("_id").is(eventId + type));            queryDebug(query);            ob = mongoTemp.findOne(query, EventTrend.class);        }        catch (Exception e)        {            e.printStackTrace();        }        return ob;    }        @Override    public Map<String, EventTrend> findEventUpataByEvent(Event event)    {        // TODO Auto-generated method stub        String weiboType = StaticParam.eventDataType.get("weibo");        String mediaType = StaticParam.eventDataType.get("media");        String weixinType = StaticParam.eventDataType.get("weixin");        Map<String, EventTrend> map = new HashMap<String, EventTrend>();        try        {            EventTrend weibo = findOne(event.getId() + weiboType);            EventTrend media = findOne(event.getId() + mediaType);            EventTrend weixin = findOne(event.getId() + weixinType);            map.put(weiboType, weibo);            map.put(mediaType, media);            map.put(weixinType, weixin);        }        catch (ZhiWeiException e)        {            e.printStackTrace();        }                return map;    }        @Override    public boolean deleteByEventId(String eventId)    {        boolean result = false;        try        {            mongoTemp.remove(new Query(Criteria.where("eventId").is(eventId)), EventTrend.class);            result = true;        }        catch (Exception e)        {            e.printStackTrace();        }        return result;    }    @Override    public EventTrend save(EventTrend ob) throws ZhiWeiException    {        try        {            ob.setId((ob.getEventId() + ob.getType()).replace(" ", "_"));            Map<String, List> map = ob.getSource();            if (map!=null)            {                ob.setSource(MapUtil.treatOrderMapTop1000(map));            }            mongoTemp.save(ob);        }        catch (Exception e)        {            e.printStackTrace();        }                return ob;    }    }