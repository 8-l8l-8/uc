/** * *************************************************** * Copyright (C), NingBo ZhiWeiReach info. Co., Ltd. * ***************************************************** *  * */package com.zhiwei.wjgg.dao.impl;import java.util.List;import org.springframework.data.mongodb.core.query.Criteria;import org.springframework.data.mongodb.core.query.Query;import org.springframework.data.mongodb.core.query.Update;import org.springframework.stereotype.Component;import com.mongodb.WriteResult;import com.zhiwei.wjgg.dao.EventTypeDao;import com.zhiwei.wjgg.exception.ZhiWeiException;import com.zhiwei.wjgg.model.EventType;/** * @author 落花流水 * @date 2016-02-26 */@Componentpublic class EventTypeDaoImpl extends GeneralDaoImpl implements EventTypeDao{    @Override    public EventType insert(EventType ob) throws ZhiWeiException    {        try        {            ob.setId(ob.getEventType()+ob.getUserId());            mongoTemp.save(ob);        } catch (Exception e)        {            e.printStackTrace();        }        return ob;    }    @Override    public EventType findOne(String id) throws ZhiWeiException    {        EventType ob;        try        {            ob = mongoTemp.findOne(new Query(Criteria.where("_id").is(id)),                    EventType.class);            return ob;        } catch (Exception e)        {            e.printStackTrace();        }        return null;    }    @Override    public EventType findOne(EventType ob) throws ZhiWeiException    {        EventType eventType;        Query query = new Query();        query.addCriteria(Criteria.where("_id").is(ob.getId()));        try        {            eventType = mongoTemp.findOne(query, EventType.class);            return eventType;        } catch (Exception e)        {            e.printStackTrace();        }        return null;    }    @Override    public List<EventType> findAll() throws ZhiWeiException    {        List<EventType> list;        try        {            list = mongoTemp.find(null, EventType.class);            return list;        } catch (Exception e)        {            e.printStackTrace();        }        return null;    }    @Override    public boolean removeOneById(String id) throws ZhiWeiException    {        boolean result = false;        try        {            mongoTemp.remove(new Query(Criteria.where("_id").is(id)),                    EventType.class);            result = true;        } catch (Exception e)        {            e.printStackTrace();        }        return result;    }    @Override    public boolean removeAll() throws ZhiWeiException    {        // TODO Auto-generated method stub        return false;    }    @Override    public boolean findAndModify(EventType ob) throws ZhiWeiException    {        boolean result = false;        WriteResult res;        try        {            Query query = new Query();            query.addCriteria(Criteria.where("_id").is(ob.getId()));            Update update = new Update();            update.set("eventType", ob.getEventType());            update.set("userId", ob.getUserId());            res = mongoTemp.upsert(query, update, EventType.class);            // mongoTemplate.findAndModify(new            // Query(Criteria.where("_id").is(ob.getId())),update, new            // FindAndModifyOptions().upsert(true).returnNew(true),Carwler.class);            result = true;        } catch (Exception e)        {            e.printStackTrace();        }        return result;    }    @Override    public long findCont() throws ZhiWeiException    {        return mongoTemp.count(null, EventType.class);    }    @Override    public List<EventType> findByUser(String userId)    {        List<EventType> list;        try        {            Query query = new Query();            query.addCriteria(Criteria.where("userId").is(userId));            list = mongoTemp.find(query, EventType.class);            return list;        } catch (Exception e)        {            e.printStackTrace();        }        return null;    }}