/** * *************************************************** * Copyright (C), NingBo ZhiWeiReach info. Co., Ltd. * ***************************************************** *  * */package com.zhiwei.wjgg.dao.impl;import java.util.ArrayList;import java.util.List;import org.springframework.data.domain.Sort;import org.springframework.data.domain.Sort.Direction;import org.springframework.data.mongodb.core.query.Criteria;import org.springframework.data.mongodb.core.query.Query;import org.springframework.stereotype.Component;import com.zhiwei.wjgg.dao.HUserInfoWBDao;import com.zhiwei.wjgg.exception.ZhiWeiException;import com.zhiwei.wjgg.model.HUserInfoWB;/** * @author cwt * @date 2016-03-04 */@Componentpublic class HUserInfoWBDaoImpl extends GeneralDaoImpl implements HUserInfoWBDao{    @Override    public HUserInfoWB insert(HUserInfoWB ob) throws ZhiWeiException    {        mongoTemp.insert(ob);        return ob;    }    @Override    public HUserInfoWB findOne(String id) throws ZhiWeiException    {        HUserInfoWB ob;        try        {            ob = mongoTemp.findOne(new Query(Criteria.where("_id").is(id)),                    HUserInfoWB.class);            return ob;        }        catch (Exception e)        {            e.printStackTrace();        }        return null;    }    @Override    public HUserInfoWB findOne(HUserInfoWB ob) throws ZhiWeiException    {        HUserInfoWB ob_new;        try        {            ob_new = mongoTemp.findOne(                    new Query(Criteria.where("_id").is(ob.getId())),                    HUserInfoWB.class);            return ob_new;        }        catch (Exception e)        {            e.printStackTrace();        }        return null;    }    @Override    public List<HUserInfoWB> findAll() throws ZhiWeiException    {        List<HUserInfoWB> list = null;        try        {            list = mongoTemp.find(null, HUserInfoWB.class);            if (null == list)            {                list = new ArrayList<HUserInfoWB>();            }        }        catch (Exception e)        {            e.printStackTrace();        }        return list;    }    @Override    public long findCont() throws ZhiWeiException    {        // TODO Auto-generated method stub        return 0;    }    @Override    public boolean removeOneById(String id) throws ZhiWeiException    {        // TODO Auto-generated method stub        return false;    }    @Override    public boolean removeAll() throws ZhiWeiException    {        // TODO Auto-generated method stub        return false;    }    @Override    public boolean findAndModify(HUserInfoWB ob) throws ZhiWeiException    {        // TODO Auto-generated method stub        return false;    }    @Override    public List<HUserInfoWB> findByIdList(List<String> ids)    {        List<HUserInfoWB> obList = null;        Query query = new Query();        query.addCriteria(Criteria.where("_id").in(ids));//        query.with(new Sort(Direction.DESC, "impact")).limit(10);        try        {            obList = mongoTemp.find(query, HUserInfoWB.class);            if (null == obList)            {                obList = new ArrayList<HUserInfoWB>();            }        }        catch (Exception e)        {            e.printStackTrace();        }        return obList;    }    @Override    public List<HUserInfoWB> findByIdList(List<String> ids, int num)    {        List<HUserInfoWB> obList = null;        Query query = new Query();        query.addCriteria(Criteria.where("_id").in(ids));        query.with(new Sort(Direction.DESC, "channelIndex")).limit(num);        try        {            obList = mongoTemp.find(query, HUserInfoWB.class);            if (null == obList)            {                obList = new ArrayList<HUserInfoWB>();            }        }        catch (Exception e)        {            e.printStackTrace();        }        return obList;    }    @Override    public HUserInfoWB findByName(String source)    {        HUserInfoWB ob_new;        try        {            ob_new = mongoTemp.findOne(                    new Query(Criteria.where("username").is(source)),                    HUserInfoWB.class);            return ob_new;        }        catch (Exception e)        {            e.printStackTrace();        }        return null;    }}