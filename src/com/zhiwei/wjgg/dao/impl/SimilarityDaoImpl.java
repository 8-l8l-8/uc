/** * *************************************************** * Copyright (C), NingBo ZhiWeiReach info. Co., Ltd. * ***************************************************** *  * */package com.zhiwei.wjgg.dao.impl;import java.util.List;import org.springframework.data.mongodb.core.query.Criteria;import org.springframework.data.mongodb.core.query.Query;import org.springframework.data.mongodb.core.query.Update;import org.springframework.stereotype.Component;import com.mongodb.WriteResult;import com.zhiwei.wjgg.dao.SimilarityDao;import com.zhiwei.wjgg.exception.ZhiWeiException;import com.zhiwei.wjgg.model.Similarity;/** * @author cwt * @date 2016-03-08 */@Componentpublic class SimilarityDaoImpl extends GeneralDaoImpl implements SimilarityDao{    @Override    public Similarity insert(Similarity ob) throws ZhiWeiException    {        mongoTemp.insert(ob);        return ob;    }    @Override    public List<Similarity> insert(List<Similarity> obList)    {        mongoTemp.insert(obList, Similarity.class);        return obList;    }    @Override    public Similarity findOne(String id) throws ZhiWeiException    {        Similarity ob;        try        {            ob = mongoTemp.findOne(new Query(Criteria.where("_id").is(id)),                    Similarity.class);            return ob;        }        catch (Exception e)        {            e.printStackTrace();        }        return null;    }    @Override    public Similarity findOne(Similarity ob) throws ZhiWeiException    {        Similarity new_ob;        try        {            new_ob = mongoTemp.findOne(                    new Query(Criteria.where("_id").is(ob.getId())),                    Similarity.class);            return new_ob;        }        catch (Exception e)        {            e.printStackTrace();        }        return null;    }    @Override    public List<Similarity> findAll() throws ZhiWeiException    {        return mongoTemp.findAll(Similarity.class);    }    @Override    public long findCont() throws ZhiWeiException    {        return mongoTemp.count(null, Similarity.class);    }    @Override    public boolean removeOneById(String id) throws ZhiWeiException    {        boolean result = false;        try        {            mongoTemp.remove(new Query(Criteria.where("_id").is(id)),                    Similarity.class);            result = true;        }        catch (Exception e)        {            e.printStackTrace();        }        return result;    }    @Override    public boolean removeAll() throws ZhiWeiException    {        // TODO Auto-generated method stub        return false;    }    @Override    public boolean findAndModify(Similarity ob) throws ZhiWeiException    {        boolean result = false;        WriteResult res;        try        {            Query query = new Query();            query.addCriteria(Criteria.where("_id").is(ob.getId()));            Similarity old_ob = mongoTemp.findOne(query, Similarity.class);            // Update update = new Update();            // if (null != ob.getMedia())            // {            // update.set("media", ob.getMedia());            // }            // if (null != ob.getWeixin())            // {            // update.set("weixin", ob.getWeixin());            // }            // res = mongoTemp.upsert(query, update, Similarity.class);            if (null != ob.getMedia())            {                old_ob.setMedia(ob.getMedia());                System.out.println(ob.getMedia().size());            }            if (null != ob.getWeixin())            {                old_ob.setWeixin(ob.getWeixin());            }            System.out.println(old_ob.getMedia());            mongoTemp.save(old_ob);            result = true;        }        catch (Exception e)        {            e.printStackTrace();        }        return result;    }}