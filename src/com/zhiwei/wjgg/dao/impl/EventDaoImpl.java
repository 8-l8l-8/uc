/** * *************************************************** * Copyright (C), NingBo ZhiWeiReach info. Co., Ltd. * ***************************************************** *  * */package com.zhiwei.wjgg.dao.impl;import java.text.SimpleDateFormat;import java.util.Date;import java.util.List;import org.springframework.data.domain.Sort;import org.springframework.data.domain.Sort.Direction;import org.springframework.data.mongodb.core.query.Criteria;import org.springframework.data.mongodb.core.query.Query;import org.springframework.data.mongodb.core.query.Update;import org.springframework.stereotype.Component;import com.mongodb.WriteResult;import com.zhiwei.wjgg.dao.EventDao;import com.zhiwei.wjgg.exception.ZhiWeiException;import com.zhiwei.wjgg.model.Event;import com.zhiwei.wjgg.util.TimeUtil;/** * @author 落花流水 * @date 2016-02-27 */@Componentpublic class EventDaoImpl extends GeneralDaoImpl implements EventDao{    private static SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");        private static final String TURE_STATE = "1";        private static final String FALSE_STATE = "0";        @Override    public Event insert(Event ob)        throws ZhiWeiException    {        try        {            ob.setSaveTime(sdf1.format(new Date()));            mongoTemp.insert(ob);        }        catch (Exception e)        {            e.printStackTrace();        }                return ob;    }        @Override    public Event findOne(String id)        throws ZhiWeiException    {        Event ob;        try        {            ob = mongoTemp.findOne(new Query(Criteria.where("_id").is(id)), Event.class);            return ob;        }        catch (Exception e)        {            e.printStackTrace();        }        return null;    }        @Override    public Event findOne(Event ob)        throws ZhiWeiException    {                Event event;        Query query = new Query();        query.addCriteria(Criteria.where("name").is(ob.getName()));        try        {            event = mongoTemp.findOne(query, Event.class);            return event;        }        catch (Exception e)        {            e.printStackTrace();        }        return null;            }        @Override    public List<Event> findAll()        throws ZhiWeiException    {        List<Event> list = null;        try        {            Query query = new Query();            query.with(new Sort(Direction.DESC, "impact")).limit(10);            list = mongoTemp.find(query, Event.class);        }        catch (Exception e)        {            e.printStackTrace();        }        return list;    }        @Override    public boolean removeOneById(String id)        throws ZhiWeiException    {        boolean result = false;        try        {            mongoTemp.remove(new Query(Criteria.where("_id").is(id)), Event.class);            result = true;        }        catch (Exception e)        {            e.printStackTrace();        }        return result;    }        @Override    public boolean removeAll()        throws ZhiWeiException    {        return false;    }        @Override    public boolean findAndModify(Event ob)        throws ZhiWeiException    {        boolean result = false;        WriteResult res;        try        {            Query query = new Query();            query.addCriteria(Criteria.where("_id").is(ob.getId()));            Update update = new Update();            update.set("correlationNum", ob.getCorrelationNum());            update.set("channelNum", ob.getChannelNum());            update.set("spread", ob.getSpread());            update.set("impact", ob.getImpact());            update.set("topWord", ob.getTopWord());            update.set("lastUpateTime", ob.getLastUpateTime());            update.set("state", ob.getState());                        // update.set("name", ob.getName());            // update.set("user", ob.getUser());            // update.set("eventLevel", ob.getEventLevel());            // update.set("eventType", ob.getEventType());            // update.set("isCorrelation", ob.isCorrelation());            // update.set("state", ob.getState());            // update.set("saveTime", ob.getSaveTime());            // update.set("startTime", ob.getStartTime());            // update.set("endTime", ob.getEndTime());            // update.set("word", ob.getWord());            // update.set("content", ob.getContent());                        res = mongoTemp.upsert(query, update, Event.class);            // mongoTemplate.findAndModify(new            // Query(Criteria.where("_id").is(ob.getId())),update, new            // FindAndModifyOptions().upsert(true).returnNew(true),Carwler.class);            result = true;        }        catch (Exception e)        {            e.printStackTrace();        }        return result;    }        @Override    public long findCont()    {        return mongoTemp.count(null, Event.class);    }        @Override    public List<Event> findEventsByType(String eventType,String username)    {        List<Event> list = null;        Query query = new Query();        query.addCriteria(Criteria.where("user").is(username));        query.addCriteria(Criteria.where("eventType").is(eventType));        query.with(new Sort(Direction.DESC, "impact")).limit(10);        try        {            list = mongoTemp.find(query, Event.class);        }        catch (Exception e)        {            e.printStackTrace();        }        return list;    }        @Override    public List<Event> findEventsByLevel(String eventLevel,String username)        throws ZhiWeiException    {        List<Event> list = null;        Query query = new Query();        query.addCriteria(Criteria.where("user").is(username));        query.addCriteria(Criteria.where("eventLevel").is(eventLevel));        query.with(new Sort(Direction.DESC, "impact")).limit(10);        try        {            list = mongoTemp.find(query, Event.class);        }        catch (Exception e)        {            e.printStackTrace();        }        return list;    }        @Override    public List<Event> findEventsByTypeAndLevel(String eventType, String eventLevel,String username)        throws ZhiWeiException    {        List<Event> list = null;        Query query = new Query();        query.addCriteria(Criteria.where("user").is(username));        query.addCriteria(Criteria.where("eventType").is(eventType));        query.addCriteria(Criteria.where("eventLevel").is(eventLevel));        query.with(new Sort(Direction.DESC, "impact")).limit(10);        try        {            list = mongoTemp.find(query, Event.class);        }        catch (Exception e)        {            e.printStackTrace();        }        return list;    }        @Override    public List<Event> findEventsByUser(String user)    {        List<Event> list = null;        Query query = new Query();        query.addCriteria(Criteria.where("user").is(user));        try        {            list = mongoTemp.find(query, Event.class);        }        catch (Exception e)        {            e.printStackTrace();        }        return list;    }        @Override    public List<Event> findByUserIsStart(String user)    {        List<Event> list = null;        Query query = new Query();        query.addCriteria(Criteria.where("user").is(user));        query.addCriteria(Criteria.where("state").is(TURE_STATE));        try        {            list = mongoTemp.find(query, Event.class);        }        catch (Exception e)        {            e.printStackTrace();        }        return list;    }        @Override    public long findContByUserIsStart(String user)    {        long cont = 0;        Query query = new Query();        query.addCriteria(Criteria.where("user").is(user));        query.addCriteria(Criteria.where("state").is(TURE_STATE));        try        {            cont = mongoTemp.count(query, Event.class);        }        catch (Exception e)        {            e.printStackTrace();        }        return cont;    }        @Override    public List<Event> fuzzyQueryByWord(String word,String userId)        throws ZhiWeiException    {        List<Event> list = null;        Query query = new Query();        String regex = ".*" + word + ".*";        query.addCriteria(Criteria.where("user").is(userId));        query.addCriteria(Criteria.where("name").regex(regex));        query.with(new Sort(Direction.DESC, "impact")).limit(10);        try        {            list = mongoTemp.find(query, Event.class);        }        catch (Exception e)        {            e.printStackTrace();        }        return list;    }        @Override    public List<Event> findEventsNearTime(String user)        throws ZhiWeiException    {        List<Event> list = null;        Query query = new Query();        query.addCriteria(Criteria.where("user").is(user));        query.with(new Sort(Direction.DESC, "startTime")).limit(5);        try        {            list = mongoTemp.find(query, Event.class);        }        catch (Exception e)        {            e.printStackTrace();        }        return list;    }        @Override    public List<Event> findAliveEvent()        throws ZhiWeiException    {        Query query = new Query();        query.addCriteria(Criteria.where("state").is("1"));        query.with(new Sort(Direction.ASC, "_id"));        List<Event> list = mongoTemp.find(query, Event.class);        return list;    }        @Override    public List<Event> findByUserIsComplete(String user, int maxCount)        throws ZhiWeiException    {        List<Event> list = null;        Query query = new Query();        query.addCriteria(Criteria.where("user").is(user));        query.addCriteria(Criteria.where("state").is(FALSE_STATE));        if (maxCount != 0)        {            query.limit(maxCount);        }        try        {            list = mongoTemp.find(query, Event.class);        }        catch (Exception e)        {            e.printStackTrace();        }        return list;    }    }