/** * *************************************************** * Copyright (C), NingBo ZhiWeiReach info. Co., Ltd. * ***************************************************** *  * */package com.zhiwei.wjgg.dao.impl;import java.util.ArrayList;import java.util.List;import org.springframework.data.domain.Sort;import org.springframework.data.domain.Sort.Direction;import org.springframework.data.mongodb.core.query.Criteria;import org.springframework.data.mongodb.core.query.Query;import org.springframework.stereotype.Component;import com.zhiwei.wjgg.dao.HUserInfoWXDao;import com.zhiwei.wjgg.exception.ZhiWeiException;import com.zhiwei.wjgg.model.HUserInfoWX;/** * @author cwt * @date 2016-03-04 */@Componentpublic class HUserInfoWXDaoImpl extends GeneralDaoImpl implements HUserInfoWXDao{    @Override    public HUserInfoWX insert(HUserInfoWX ob)        throws ZhiWeiException    {        mongoTemp.insert(ob);        return ob;    }        @Override    public HUserInfoWX findOne(String id)        throws ZhiWeiException    {        HUserInfoWX ob;        try        {            ob = mongoTemp.findOne(new Query(Criteria.where("_id").is(id)), HUserInfoWX.class);            return ob;        }        catch (Exception e)        {            e.printStackTrace();        }        return null;    }        @Override    public HUserInfoWX findOne(HUserInfoWX ob)        throws ZhiWeiException    {        HUserInfoWX ob_new;        try        {            ob_new = mongoTemp.findOne(new Query(Criteria.where("_id").is(ob.getId())), HUserInfoWX.class);            return ob_new;        }        catch (Exception e)        {            e.printStackTrace();        }        return null;    }        @Override    public List<HUserInfoWX> findAll()        throws ZhiWeiException    {        // TODO Auto-generated method stub        return null;    }        @Override    public long findCont()        throws ZhiWeiException    {        // TODO Auto-generated method stub        return 0;    }        @Override    public boolean removeOneById(String id)        throws ZhiWeiException    {        // TODO Auto-generated method stub        return false;    }        @Override    public boolean removeAll()        throws ZhiWeiException    {        // TODO Auto-generated method stub        return false;    }        @Override    public boolean findAndModify(HUserInfoWX ob)        throws ZhiWeiException    {        // TODO Auto-generated method stub        return false;    }        @Override    public List<HUserInfoWX> findByIdList(List<String> ids)    {        List<HUserInfoWX> obList = null;        Query query = new Query();        query.addCriteria(Criteria.where("_id").in(ids));//        query.with(new Sort(Direction.DESC, "impact")).limit(10);        try        {            obList = mongoTemp.find(query, HUserInfoWX.class);            if (null == obList)            {                obList = new ArrayList<HUserInfoWX>();            }        }        catch (Exception e)        {            e.printStackTrace();        }                return obList;    }        @Override    public List<HUserInfoWX> findBySourceList(List<String> source)    {                List<HUserInfoWX> obList = null;        Query query = new Query();        query.addCriteria(Criteria.where("username").in(source));        try        {            obList = mongoTemp.find(query, HUserInfoWX.class);            if (null == obList)            {                obList = new ArrayList<HUserInfoWX>();            }        }        catch (Exception e)        {            e.printStackTrace();        }                return obList;    }    @Override    public List<HUserInfoWX> findByIdList(List<String> ids, int num)    {        List<HUserInfoWX> obList = null;        Query query = new Query();        query.addCriteria(Criteria.where("_id").in(ids));        query.with(new Sort(Direction.DESC, "channelIndex")).limit(num);        try        {            obList = mongoTemp.find(query, HUserInfoWX.class);            if (null == obList)            {                obList = new ArrayList<HUserInfoWX>();            }        }        catch (Exception e)        {            e.printStackTrace();        }                return obList;    }    @Override    public HUserInfoWX findByName(String source)    {        HUserInfoWX ob_new;        try        {            ob_new = mongoTemp.findOne(new Query(Criteria.where("username").is(source)), HUserInfoWX.class);            return ob_new;        }        catch (Exception e)        {            e.printStackTrace();        }        return null;    }    }