/** * *************************************************** * Copyright (C), NingBo ZhiWeiReach info. Co., Ltd. * ***************************************************** *  * */package com.zhiwei.wjgg.dao.impl;import java.util.List;import org.springframework.data.mongodb.core.query.Criteria;import org.springframework.data.mongodb.core.query.Query;import org.springframework.data.mongodb.core.query.Update;import org.springframework.stereotype.Component;import com.mongodb.WriteResult;import com.zhiwei.wjgg.dao.NatureKeyPointDao;import com.zhiwei.wjgg.exception.ZhiWeiException;import com.zhiwei.wjgg.model.NatureKeyPoint;/** * @author cwt * @date 2016-02-29 */@Componentpublic class NatureKeyPointDaoImpl extends GeneralDaoImpl implements        NatureKeyPointDao{    @Override    public NatureKeyPoint insert(NatureKeyPoint ob) throws ZhiWeiException    {        try        {            ob.setId((ob.getEventId() + ob.getType()).replace(" ", "_"));            mongoTemp.insert(ob);        }        catch (Exception e)        {            e.printStackTrace();        }        return ob;    }    public List<NatureKeyPoint> insert(List<NatureKeyPoint> list)            throws ZhiWeiException    {        try        {            for (NatureKeyPoint ob : list)            {                ob.setId((ob.getEventId() + ob.getType()).replace(" ", "_"));                mongoTemp.insert(ob);            }        }        catch (Exception e)        {            e.printStackTrace();        }        return list;    }    @Override    public NatureKeyPoint findOne(String id) throws ZhiWeiException    {        NatureKeyPoint ob;        try        {            ob = mongoTemp.findOne(new Query(Criteria.where("_id").is(id)),                    NatureKeyPoint.class);            return ob;        }        catch (Exception e)        {            e.printStackTrace();        }        return null;    }    @Override    public NatureKeyPoint findOne(NatureKeyPoint ob) throws ZhiWeiException    {        NatureKeyPoint ob1;        try        {            Query query = new Query();            query.addCriteria(Criteria.where("type").is(ob.getType()));            query.addCriteria(Criteria.where("eventId").is(ob.getEventId()));            ob1 = mongoTemp.findOne(query, NatureKeyPoint.class);            return ob1;        }        catch (Exception e)        {            e.printStackTrace();        }        return null;    }    @Override    public List<NatureKeyPoint> findAll() throws ZhiWeiException    {        List<NatureKeyPoint> list = null;        try        {            list = mongoTemp.find(null, NatureKeyPoint.class);        }        catch (Exception e)        {            e.printStackTrace();        }        return list;    }    @Override    public long findCont() throws ZhiWeiException    {        return mongoTemp.count(null, NatureKeyPoint.class);    }    @Override    public boolean removeOneById(String id) throws ZhiWeiException    {        boolean result = false;        try        {            mongoTemp.remove(new Query(Criteria.where("_id").is(id)),                    NatureKeyPoint.class);            result = true;        }        catch (Exception e)        {            e.printStackTrace();        }        return result;    }    @Override    public boolean removeAll() throws ZhiWeiException    {        // TODO Auto-generated method stub        return false;    }    @Override    public boolean findAndModify(NatureKeyPoint ob) throws ZhiWeiException    {        boolean result = false;        WriteResult res;        try        {            Query query = new Query();            query.addCriteria(Criteria.where("_id").is(ob.getId()));            Update update = new Update();            update.set("time_content", ob.getTime_content());            res = mongoTemp.upsert(query, update, NatureKeyPoint.class);            result = true;        }        catch (Exception e)        {            e.printStackTrace();        }        return result;    }    @Override    public NatureKeyPoint findByEventIdInTime(String eventId, String type)    {        NatureKeyPoint ob = null;        try        {            Query query = new Query();            query.addCriteria(Criteria.where("_id").is(eventId + type));            ob = mongoTemp.findOne(query, NatureKeyPoint.class);        }        catch (Exception e)        {            e.printStackTrace();        }        return ob;    }    @Override    public boolean deleteByEventId(String eventId)    {        boolean result = false;        try        {            mongoTemp.remove(new Query(Criteria.where("eventId").is(eventId)),                    NatureKeyPoint.class);            result = true;        }        catch (Exception e)        {            e.printStackTrace();        }        return result;    }}