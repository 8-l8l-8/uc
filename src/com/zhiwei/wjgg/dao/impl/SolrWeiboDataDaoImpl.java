/** * *************************************************** * Copyright (C), NingBo ZhiWeiReach info. Co., Ltd. * ***************************************************** *  * */package com.zhiwei.wjgg.dao.impl;import java.util.ArrayList;import java.util.List;import org.springframework.data.mongodb.core.query.Criteria;import org.springframework.data.mongodb.core.query.Query;import org.springframework.data.mongodb.core.query.Update;import org.springframework.stereotype.Component;import com.mongodb.WriteResult;import com.zhiwei.wjgg.dao.SolrWeiboDataDao;import com.zhiwei.wjgg.exception.ZhiWeiException;import com.zhiwei.wjgg.model.SolrWeibo;/** * @author cwt * @date 2016-03-07 */@Componentpublic class SolrWeiboDataDaoImpl extends GeneralDaoImpl implements SolrWeiboDataDao{        @Override    public SolrWeibo insert(SolrWeibo ob)        throws ZhiWeiException    {        try        {            mongoTemp.insert(ob);        }        catch (Exception e)        {            e.printStackTrace();        }                return ob;    }        @Override    public List<SolrWeibo> insert(List<SolrWeibo> obList)        throws ZhiWeiException    {        mongoTemp.insert(obList, SolrWeibo.class);        return obList;    }        @Override    public SolrWeibo findOne(String id)        throws ZhiWeiException    {        SolrWeibo ob;        try        {            ob = mongoTemp.findOne(new Query(Criteria.where("_id").is(id)), SolrWeibo.class);            return ob;        }        catch (Exception e)        {            e.printStackTrace();        }        return null;    }        @Override    public SolrWeibo findOne(SolrWeibo ob)        throws ZhiWeiException    {        // TODO Auto-generated method stub        return null;    }        @Override    public List<SolrWeibo> findAll()        throws ZhiWeiException    {        return mongoTemp.findAll(SolrWeibo.class);    }        @Override    public long findCont()        throws ZhiWeiException    {        return mongoTemp.count(null, SolrWeibo.class);    }        @Override    public boolean removeOneById(String id)        throws ZhiWeiException    {        boolean result = false;        try        {            mongoTemp.remove(new Query(Criteria.where("_id").is(id)), SolrWeibo.class);            result = true;        }        catch (Exception e)        {            e.printStackTrace();        }        return result;    }        @Override    public boolean removeAll()        throws ZhiWeiException    {        // TODO Auto-generated method stub        return false;    }        @Override    public boolean findAndModify(SolrWeibo ob)        throws ZhiWeiException    {        boolean result = false;        WriteResult res;        try        {            Query query = new Query();            query.addCriteria(Criteria.where("_id").is(ob.get_id()));            Update update = new Update();            update.set("vtypr", ob.getVtypr());            update.set("user_id", ob.getUser_id());            update.set("text", ob.getText());            update.set("_ts", ob.get_ts());            update.set("rstime", ob.getRstime());            update.set("ns", ob.getNs());            update.set("isForward", ob.getIsForward());            update.set("retweet_status_id", ob.getRetweet_status_id());            update.set("source", ob.getSource());            update.set("time", ob.getTime());            update.set("roottext", ob.getRoottext());                        res = mongoTemp.upsert(query, update, SolrWeibo.class);            result = true;        }        catch (Exception e)        {            e.printStackTrace();        }        return result;    }        @Override    public List<SolrWeibo> findInTime(String start, String end)    {        List<SolrWeibo> obList = null;        try        {            Query query = new Query();            query.addCriteria(Criteria.where("time").gte(start).lte(end));            obList = mongoTemp.find(query, SolrWeibo.class);        }        catch (Exception e)        {            e.printStackTrace();        }                return obList;    }        @Override    public List<String> findByIdList(List<String> ids)    {        List<String> textList = new ArrayList<String>();                Query query = new Query();        query.addCriteria(Criteria.where("_id").in(ids));                try        {            List<SolrWeibo> obList = mongoTemp.find(query, SolrWeibo.class);            if (null != obList)            {                for (SolrWeibo media : obList)                {                    textList.add(media.getText());                }            }        }        catch (Exception e)        {            e.printStackTrace();        }                return textList;    }    @Override    public List<SolrWeibo> findObByIdList(List<String> ids)            throws ZhiWeiException    {        List<SolrWeibo> obList = null;;        Query query = new Query();        query.addCriteria(Criteria.where("_id").in(ids));        try        {            obList = mongoTemp.find(query, SolrWeibo.class);        }        catch (Exception e)        {            e.printStackTrace();        }        return obList;    }    }