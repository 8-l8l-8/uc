/** * *************************************************** * Copyright (C), NingBo ZhiWeiReach info. Co., Ltd. * ***************************************************** *  * */package com.zhiwei.wjgg.dao.impl;import java.util.ArrayList;import java.util.Date;import java.util.List;import org.springframework.data.mongodb.core.query.Criteria;import org.springframework.data.mongodb.core.query.Query;import org.springframework.data.mongodb.core.query.Update;import org.springframework.stereotype.Component;import com.mongodb.WriteResult;import com.zhiwei.wjgg.dao.SolrWeixinDataDao;import com.zhiwei.wjgg.exception.ZhiWeiException;import com.zhiwei.wjgg.model.SolrWeixin;/** * @author cwt * @date 2016-03-07 */@Componentpublic class SolrWeixinDataDaoImpl extends GeneralDaoImpl implements SolrWeixinDataDao{        @Override    public SolrWeixin insert(SolrWeixin ob)        throws ZhiWeiException    {        try        {            mongoTemp.insert(ob);        }        catch (Exception e)        {            e.printStackTrace();        }                return ob;    }        @Override    public List<SolrWeixin> insert(List<SolrWeixin> obList)        throws ZhiWeiException    {        mongoTemp.insert(obList, SolrWeixin.class);        return obList;    }        @Override    public SolrWeixin findOne(String id)        throws ZhiWeiException    {        SolrWeixin ob;        try        {            ob = mongoTemp.findOne(new Query(Criteria.where("_id").is(id)), SolrWeixin.class);            return ob;        }        catch (Exception e)        {            e.printStackTrace();        }        return null;    }        @Override    public SolrWeixin findOne(SolrWeixin ob)        throws ZhiWeiException    {        // TODO Auto-generated method stub        return null;    }        @Override    public List<SolrWeixin> findAll()        throws ZhiWeiException    {        return mongoTemp.findAll(SolrWeixin.class);    }        @Override    public long findCont()        throws ZhiWeiException    {        return mongoTemp.count(null, SolrWeixin.class);    }        @Override    public boolean removeOneById(String id)        throws ZhiWeiException    {        boolean result = false;        try        {            mongoTemp.remove(new Query(Criteria.where("_id").is(id)), SolrWeixin.class);            result = true;        }        catch (Exception e)        {            e.printStackTrace();        }        return result;    }        @Override    public boolean removeAll()        throws ZhiWeiException    {        // TODO Auto-generated method stub        return false;    }        @Override    public boolean findAndModify(SolrWeixin ob)        throws ZhiWeiException    {        boolean result = false;        WriteResult res;        try        {            Query query = new Query();            query.addCriteria(Criteria.where("_id").is(ob.getId()));            Update update = new Update();            update.set("content", ob.getContent());            update.set("pt", ob.getPt());            update.set("title", ob.getTitle());            update.set("source", ob.getSource());            update.set("time", ob.getTime());            update.set("savetime", ob.getSavetime());            update.set("rsid", ob.getRsid());            update.set("type", ob.getType());                        res = mongoTemp.upsert(query, update, SolrWeixin.class);            result = true;        }        catch (Exception e)        {            e.printStackTrace();        }        return result;    }        @Override    public List<SolrWeixin> findInTime(Date start, Date end)        throws ZhiWeiException    {        List<SolrWeixin> obList = null;        try        {            Query query = new Query();            query.addCriteria(Criteria.where("time").gte(start).lte(end));            obList = mongoTemp.find(query, SolrWeixin.class);        }        catch (Exception e)        {            e.printStackTrace();        }                return obList;    }        @Override    public List<String> findByIdList(List<String> ids)    {        List<String> textList = new ArrayList<String>();                Query query = new Query();        query.addCriteria(Criteria.where("_id").in(ids));                try        {            List<SolrWeixin> obList = mongoTemp.find(query, SolrWeixin.class);            if (null != obList)            {                for (SolrWeixin weixin : obList)                {                    textList.add(weixin.getTitle());                }            }        }        catch (Exception e)        {            e.printStackTrace();        }                return textList;    }    @Override    public List<SolrWeixin> findObByIdList(List<String> ids)            throws ZhiWeiException    {        List<SolrWeixin> obList = null;;        Query query = new Query();        query.addCriteria(Criteria.where("_id").in(ids));        try        {            obList = mongoTemp.find(query, SolrWeixin.class);        }        catch (Exception e)        {            e.printStackTrace();        }        return obList;    }    }