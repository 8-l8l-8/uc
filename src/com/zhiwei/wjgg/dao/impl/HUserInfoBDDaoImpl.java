/** * *************************************************** * Copyright (C), NingBo ZhiWeiReach info. Co., Ltd. * ***************************************************** *  * */package com.zhiwei.wjgg.dao.impl;import java.util.ArrayList;import java.util.List;import org.springframework.data.domain.Sort;import org.springframework.data.domain.Sort.Direction;import org.springframework.data.mongodb.core.query.Criteria;import org.springframework.data.mongodb.core.query.Query;import org.springframework.stereotype.Component;import com.zhiwei.wjgg.dao.HUserInfoBDDao;import com.zhiwei.wjgg.exception.ZhiWeiException;import com.zhiwei.wjgg.model.HUserInfoBD;/** * @author cwt * @date 2016-03-04 */@Componentpublic class HUserInfoBDDaoImpl extends GeneralDaoImpl implements HUserInfoBDDao{        @Override    public HUserInfoBD insert(HUserInfoBD ob)        throws ZhiWeiException    {        mongoTemp.insert(ob);        return ob;    }        @Override    public HUserInfoBD findOne(String id)        throws ZhiWeiException    {        HUserInfoBD ob;        try        {            ob = mongoTemp.findOne(new Query(Criteria.where("_id").is(id)), HUserInfoBD.class);            return ob;        }        catch (Exception e)        {            e.printStackTrace();        }        return null;    }        @Override    public HUserInfoBD findOne(HUserInfoBD ob)        throws ZhiWeiException    {        HUserInfoBD ob_new;        try        {            ob_new = mongoTemp.findOne(new Query(Criteria.where("_id").is(ob.getId())), HUserInfoBD.class);            return ob_new;        }        catch (Exception e)        {            e.printStackTrace();        }        return null;    }        @Override    public List<HUserInfoBD> findAll()        throws ZhiWeiException    {        List<HUserInfoBD> list = null;        try        {            list = mongoTemp.find(null, HUserInfoBD.class);            if (list == null)            {                list = new ArrayList<HUserInfoBD>();            }        }        catch (Exception e)        {            e.printStackTrace();        }        return list;    }        @Override    public long findCont()        throws ZhiWeiException    {        // TODO Auto-generated method stub        return 0;    }        @Override    public boolean removeOneById(String id)        throws ZhiWeiException    {        // TODO Auto-generated method stub        return false;    }        @Override    public boolean removeAll()        throws ZhiWeiException    {        // TODO Auto-generated method stub        return false;    }        @Override    public boolean findAndModify(HUserInfoBD ob)        throws ZhiWeiException    {        // TODO Auto-generated method stub        return false;    }        @Override    public List<HUserInfoBD> findByIdList(List<String> ids)    {        List<HUserInfoBD> obList = null;        Query query = new Query();        query.addCriteria(Criteria.where("_id").in(ids));//        query.with(new Sort(Direction.DESC, "impact"));        try        {            obList = mongoTemp.find(query, HUserInfoBD.class);            if (null == obList)            {                obList = new ArrayList<HUserInfoBD>();            }        }        catch (Exception e)        {            e.printStackTrace();        }                return obList;    }        @Override    public List<HUserInfoBD> findByIdList(List<String> ids,int num)    {        List<HUserInfoBD> obList = null;        Query query = new Query();        query.addCriteria(Criteria.where("_id").in(ids));        query.with(new Sort(Direction.DESC, "channelIndex")).limit(num);        try        {            obList = mongoTemp.find(query, HUserInfoBD.class);            if (null == obList)            {                obList = new ArrayList<HUserInfoBD>();            }        }        catch (Exception e)        {            e.printStackTrace();        }                return obList;    }    @Override    public HUserInfoBD findByName(String source)    {        HUserInfoBD ob_new;        try        {            ob_new = mongoTemp.findOne(new Query(Criteria.where("source").is(source)), HUserInfoBD.class);                        return ob_new;        }        catch (Exception e)        {            e.printStackTrace();        }        return null;    }    }