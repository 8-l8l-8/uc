/*** *************************************************** * Copyright (C), NingBo ZhiWeiReach info. Co., Ltd. * ***************************************************** *  **/package com.uc.system.dao.impl;import java.util.List;import javax.annotation.Resource;import org.springframework.data.mongodb.core.MongoTemplate;import org.springframework.data.mongodb.core.query.Criteria;import org.springframework.data.mongodb.core.query.Query;import org.springframework.data.mongodb.core.query.Update;import org.springframework.stereotype.Component;import com.uc.system.dao.PolicyInfoDao;import com.uc.system.exception.ZhiWeiException;import com.uc.system.model.Page;import com.uc.system.model.PolicyInfo;/** * @author Simple * @date 2016-04-18 */@Componentpublic class PolicyInfoDaoImpl implements PolicyInfoDao {	@Resource	private MongoTemplate mongoTemp;    @Override    public PolicyInfo insert(PolicyInfo ob)        throws ZhiWeiException    {        mongoTemp.save(ob);        return ob;    }    @Override    public PolicyInfo findOne(String id)        throws ZhiWeiException    {        PolicyInfo info = mongoTemp.findOne(new Query(Criteria.where("_id").is(id)), PolicyInfo.class);        return info;    }    @Override    public PolicyInfo findOne(PolicyInfo ob)        throws ZhiWeiException    {        return null;    }    @Override    public List<PolicyInfo> findAll()        throws ZhiWeiException    {        return null;    }    @Override    public long findCont()        throws ZhiWeiException    {        return 0;    }    @Override    public boolean removeOneById(String id)        throws ZhiWeiException    {           mongoTemp.remove(new Query(Criteria.where("_id").is(id)), PolicyInfo.class);        return false;    }    @Override    public boolean removeAll()        throws ZhiWeiException    {        return false;    }    @Override    public boolean findAndModify(PolicyInfo ob)        throws ZhiWeiException    {           try        {            mongoTemp.save(ob);            return true;        }        catch (Exception e)        {            throw new ZhiWeiException(e.getMessage());        }    }    @Override    public void modifyTop(String id, int toState)    {           Query query = new Query(Criteria.where("_id").is(id));        Update update  = new Update();        update.set("topState", toState);        mongoTemp.findAndModify(query, update, PolicyInfo.class);    }    @Override    public List<PolicyInfo> findAll(com.uc.system.model.Query query, Page page)    {           //TODO:关键词查找可以用Solr        Query query1= new Query();//        query.addCriteria(Criteria.where("").is(query.get))        List<PolicyInfo> list  = mongoTemp.find(query1, PolicyInfo.class);        return list;    } }